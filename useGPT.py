from openai import OpenAI
from pydantic import BaseModel, Field
from typing import Literal, List
from dotenv import dotenv_values
import json

from io import BytesIO
import base64


class RankTranscripts(BaseModel):
    IDs: List[str] = Field(default_factory=list, description="state the IDs corresponding to the relevant transcripts for answering the question, starting from the most relevant.")
    relevant_texts: List[str] = Field(default_factory=list, description="state the possible answers the question inferred from each relevant video in the list.")
    


class GPT:
    def __init__(self, model = "gpt-4o-mini"):
        config = dotenv_values(".env")        
        self.model = model
        self.client = OpenAI(api_key=config["OPENAI_API_KEY"])


    def prepare_user_prompt_rank_transcripts(self,question, caption, transcripts):
        transcripts_prompt = ""
        for id, transcript in transcripts.items():
            transcripts_prompt = transcripts_prompt + '{}: {}\n'.format(id, transcript) 

        user_prompt = 'Question: {}\n Image caption: {}\n List of transcripts:\n'.format(question,caption)

        user_prompt = user_prompt + transcripts_prompt
        return user_prompt

    def get_sys_prompt_rank_transcripts(self):

        sysContent = '''
            You are a helpful assistant with extensive language and reasoning knowledge. 
            You will be provided with: 
            1. A question about an image which is related to a step of a cooking recipe.
            2. A basic caption for the image generated by a Visual AI. Although you won't be able to directly view the image, the general caption will provide an overall description of the image although might not be entirely precise. 
            3. A list of transcripts for a series of videos relevant to the same cooking recipe.

            The goal is:
            To identify the most relevant videos to the asked question. You have to investigate the transcripts of the videos, infer possible answers to the question from each transcript and then provide the list of the videos (their ids) as the most relevant for answering the questions. List the most relevant first.
            You have to respond with a structured solution including: 
            1. List of the the IDs corresponding to the relevant transcripts for answering the question, starting from the most relevant
            2. List of possible answers to the question inferred from each relevant video in the list.''' 
        return sysContent


    def rank_transcripts(self, question, caption, transcripts_dic):
        query = self.prepare_user_prompt_rank_transcripts(question, caption, transcripts_dic)
        #print(query)

        completion = self.client.beta.chat.completions.parse(
            model= self.model,
            messages = [
            {
            "role": "system",
            "content": self.get_sys_prompt_rank_transcripts() 
            },
            {
                "role": "user",
                "content": query
                
            }
            ],
            max_tokens=32768,
            top_p=1,
            #temperature=0,
            #seed=42,
            response_format= RankTranscripts,
        
        )
        response = completion.choices[0].message.parsed
        response = response.model_dump_json()
        response = json.loads(response)
        return response
    



